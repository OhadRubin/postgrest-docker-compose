version: '3'

services:

  ###############
  # postgres-db #
  ###############
  db:
    container_name: db
    image: postgres:latest
    ports:
      - "0.0.0.0:5564:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_ANON_ROLE=${DB_ANON_ROLE}
      - DB_SCHEMA=${DB_SCHEMA}
    volumes:
      # anything in initdb directory is created in the database
      # see "How to extend this image" section at https://hub.docker.com/r/_/postgres/
      - "./initdb:/docker-entrypoint-initdb.d"
      - local_pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - back-end

  ##################
  # postgrest-demo #
  ##################
  postgrest-demo:
    container_name: postgrest-demo
    image: nginx:mainline-alpine
    ports:
      - "80:80"
    volumes:
      # anything in html directory is hosted via nginx
      - "./html:/usr/share/nginx/html"
    restart: always
    networks:
      - back-end

  #############
  # postgrest #
  #############
  postgrest:
    container_name: postgrest
    image: postgrest/postgrest:latest
    ports:
      - "3000:3000"
    # Available environment variables documented here:
    # https://postgrest.org/en/latest/configuration.html#environment-variables
    environment:
      # The standard connection URI format, documented at
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # The name of which database schema to expose to REST clients
      - PGRST_DB_SCHEMA=${DB_SCHEMA}
      # The database role to use when no client authentication is provided
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      # Overrides the base URL used within the OpenAPI self-documentation hosted at the API root path
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://localhost:3000
    restart: always
    depends_on:
      - db
    networks:
      - back-end


  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4
    restart: always
    ports:
      - "8888:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_USER}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - front-end
      - back-end

  ##############
  # swagger-ui #
  ##############
  swagger-ui:
    container_name: swagger-ui
    image: swaggerapi/swagger-ui:latest
    ports:
      - "8090:8080"
    environment:
      - API_URL=http://localhost:3000/
    restart: always
    depends_on:
      - postgrest
    networks:
      - front-end
      - back-end

  nginx:
    build: 
      context: . 
      dockerfile: Dockerfile
    ports:
      - "5801:80"
      - "5800:5800"
    depends_on:
      - db
      - postgrest
    networks:
      - front-end
      - back-end
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Ensure the path matches your local setup
      # - ./nginx.conf:/etc/nginx/conf.d/default.conf  # Ensure the path matches your local setup



      
  backup_worker:
    build:
      context: .
      dockerfile: backup_worker_dockerfile.Dockerfile
    volumes:
      - "./backup:/backup"
      - "./scripts:/scripts"
      - local_pgdata:/var/lib/postgresql/data:ro
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    entrypoint: ["/bin/bash", "/scripts/schedule_backup.sh"]
    networks:
      - back-end

volumes:
  pgadmin-data:
  local_pgdata:


networks:
  front-end:
  back-end:
